<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools for Information Literacy</title>
    <description>Tools and concepts for information literacy. Includes software use and maintenance, computer applications, and networked information systems.</description>
    <link>http://inls161.johndmart.in/</link>
    <atom:link href="http://inls161.johndmart.in/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 30 Jun 2016 11:29:07 -0400</pubDate>
    <lastBuildDate>Thu, 30 Jun 2016 11:29:07 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Troubleshootingg</title>
        <description>&lt;p&gt;This lab session will be primarily dedicated to helping you work out kinks and wrinkles in the process of getting your site online and completing the second assignment. 
If you are already very far along, then this is an opportunity for you to finish your work. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h1 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h1&gt;

&lt;p&gt;In addition to completing your site and the assignment at hand, we will start looking at ways that you can teach yourself how to fix problems that happen. 
You will always run into issues, no matter what you are working on. 
This will never stop. &lt;/p&gt;

&lt;p&gt;At that point, you have two options: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wait for someone to help you. &lt;/li&gt;
&lt;li&gt;Figure it out on your own. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Guess which one goes further in the course of your academic and work lives.&lt;/p&gt;

&lt;h2 id=&quot;sources-of-information-are-myriad&quot;&gt;Sources of information are myriad&lt;/h2&gt;

&lt;p&gt;It is really difficult to recommend places to get help with troubleshooting online. 
This is not because they are so few, but because they are so many. &lt;/p&gt;

&lt;p&gt;The best approach is to actually see what information you can get directly from the error interaction and then move on from there. &lt;/p&gt;

&lt;p&gt;Read the error and try to understand it in plain language. 
That may work some of the time. &lt;/p&gt;

&lt;p&gt;Some error systems give VERY helpful errors that include suggestions for ways to fix what has gone wrong. 
Git is like this.
If you have a git error, most of the time, it will tell you what has gone wrong and how you can fix it. 
Usually you just have to read it and do what it says. &lt;/p&gt;

&lt;p&gt;Sometimes error messages will be more obtuse: this is a legitimate and well-known fact. &lt;/p&gt;

&lt;p&gt;If you catch an error that doesn&amp;#39;t make sense to you, try at the very least to figure out what it means or to what it is referring. &lt;/p&gt;

&lt;h2 id=&quot;google-it&quot;&gt;Google it&lt;/h2&gt;

&lt;p&gt;Take this error, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;error: Entry &#39;&amp;lt;fileName&amp;gt;&#39; would be overwritten by merge. Cannot merge. (Changes in staging area)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not particularly helpful. 
I could pore over the git documentation for this, or I could take a more reasonable path and &lt;a href=&quot;http://lmgtfy.com/?q=error%3A+Entry+%27%3CfileName%3E%27+would+be+overwritten+by+merge.+Cannot+merge.+(Changes+in+staging+area)&quot;&gt;Google it&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As you can see, there is a fair amount of information immediately available that will help you cirvumvent that error. &lt;/p&gt;

&lt;p&gt;Take this approach first and keep these things in mind:
1. Be careful: not all information is good. 
2. Learn to spot the difference. 
3. READ.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.org&quot;&gt;Stack Overflow&lt;/a&gt; is generally a useful resource for recovering from errors. 
It is well curated and lots of people use it to figure things out. &lt;/p&gt;

&lt;h1 id=&quot;for-next-week&quot;&gt;For next week&lt;/h1&gt;
</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/web/2016/07/01/web-lab/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/web/2016/07/01/web-lab/</guid>
        
        <category>troubleshooting</category>
        
        <category>websites</category>
        
        <category>trial and error</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title></title>
        <description></description>
        <pubDate>Thu, 30 Jun 2016 11:29:07 -0400</pubDate>
        <link>http://inls161.johndmart.in/2016/06/30/template/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/2016/06/30/template/</guid>
        
        <category>tag</category>
        
        <category>tag</category>
        
        
      </item>
    
      <item>
        <title></title>
        <description>&lt;h2 id=&quot;some-easy-themes&quot;&gt;Some easy themes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/basic/&quot;&gt;http://jekyllthemes.org/themes/basic/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/trading/&quot;&gt;http://jekyllthemes.org/themes/trading/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/devjournal/&quot;&gt;http://jekyllthemes.org/themes/devjournal/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/gravity/&quot;&gt;http://jekyllthemes.org/themes/gravity/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-challenging-themes&quot;&gt;More challenging themes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/jekyll-clean/&quot;&gt;http://jekyllthemes.org/themes/jekyll-clean/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/thinkspace/&quot;&gt;http://jekyllthemes.org/themes/thinkspace/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/vitae/&quot;&gt;http://jekyllthemes.org/themes/vitae/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/dbyll/&quot;&gt;http://jekyllthemes.org/themes/dbyll/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/blackdoc/&quot;&gt;http://jekyllthemes.org/themes/blackdoc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/daktilo/&quot;&gt;http://jekyllthemes.org/themes/daktilo/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 11:29:07 -0400</pubDate>
        <link>http://inls161.johndmart.in/2016/06/30/notes-for-later/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/2016/06/30/notes-for-later/</guid>
        
        <category>tag</category>
        
        <category>tag</category>
        
        
      </item>
    
      <item>
        <title>Branching and Merging</title>
        <description>&lt;p&gt;Today we will set up a testing workflow and learn how to create branches for adding and changing features on our sites. 
We will use this to change the visual style the site and create blog posts. &lt;/p&gt;

&lt;p&gt;This session will be mostly hands-on. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h1 id=&quot;set-up-testing-environment&quot;&gt;Set up testing environment&lt;/h1&gt;

&lt;p&gt;Testing and checking your work is a necessary part of doing any task. 
You don&amp;#39;t send a paper off to your professor without proofreading it (you shouldn&amp;#39;t, anyway). 
Similarly, you do not want to put a website online that you haven&amp;#39;t tested. &lt;/p&gt;

&lt;p&gt;I&amp;#39;ve created a repository that has some helper scripts in it. 
It is called &lt;code&gt;helper-scripts&lt;/code&gt; and is located in the github organization for the class. 
I will add to it over the course of rest of the semester. &lt;/p&gt;

&lt;p&gt;Open an SSH terminal in your CodeAnywhere container. 
Then clone the &lt;code&gt;helper-scripts&lt;/code&gt; repo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone git@github.com:inls161/helper-scripts.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have it, descend into the directory. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd helper-scripts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then look at the &lt;code&gt;README.md&lt;/code&gt;. 
Remember, you can look at this online, in GitHub, or you can look at it in the terminal (or in your CodeAnywhere text editor). &lt;/p&gt;

&lt;p&gt;You&amp;#39;ll need to make sure that the &lt;code&gt;install-gh-pages.sh&lt;/code&gt; file is executable. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -lah&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see an &lt;code&gt;x&lt;/code&gt; in the permissions. Is it there?&lt;/p&gt;

&lt;p&gt;The filename will also be highlighted as green text if the file is executable. &lt;/p&gt;

&lt;p&gt;Once you have made sure it can be executed, you have to run it as a superuser, or the root user. 
To do this with any command, type &lt;code&gt;sudo&lt;/code&gt; before the rest of the command.
&lt;code&gt;sudo&lt;/code&gt; is a program that allows you to execute system commands. 
You only need it when you are doing something that operates on the operating system itself, like installing new software. &lt;/p&gt;

&lt;p&gt;This script installs updates and new software to your system.
Just type:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ./install-gh-pages.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The dot and slash specify the location. 
This is necessary because this executable is not in your normal execution &lt;code&gt;PATH&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;That command will run for a few minutes (~10 min). 
Just let it go. It should work unsupervised. 
We&amp;#39;ll switch to a different tab to continue working while it runs. &lt;/p&gt;

&lt;h1 id=&quot;create-a-branch&quot;&gt;Create a branch&lt;/h1&gt;

&lt;p&gt;To create, or &amp;quot;checkout&amp;quot; a new branch, we can follow Roger Dudler&amp;#39;s guide again.&lt;label for=&#39;gitnoshit&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;gitnoshit&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;Dudler, Roger. “Git: The Simple Guide.” Git:
The Simple Guide. Last modified 2015. &lt;a href=&quot;http://rogerdudler.github.io/git-guide/&quot;&gt;http://rogerdudler.github.io/git-guide/&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Also &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates a new branch and switches us into it.&lt;/p&gt;

&lt;p&gt;If we want to see our existing branches and see where we are, type:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -l&lt;/code&gt; or &lt;code&gt;git branch --list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once here we can make changes without disturbing the &lt;code&gt;master&lt;/code&gt; branch, which should have our running code in it. &lt;/p&gt;

&lt;p&gt;To switch between branches, simply type (mutatis mutandis):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout BRANCH-NAME&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;edit-your-css&quot;&gt;Edit your CSS&lt;/h1&gt;

&lt;p&gt;Find your CSS file. &lt;/p&gt;

&lt;p&gt;This file might have either &lt;code&gt;.css&lt;/code&gt; or &lt;code&gt;.scss&lt;/code&gt; as an extension.&lt;/p&gt;

&lt;p&gt;Once you have found it you should make a small change to it.
Change the background color, for instance.&lt;/p&gt;

&lt;p&gt;Once that is done, you can add and commit those changes: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add -v * &amp;amp;&amp;amp; git commit -a -m &amp;quot;edited css to different background color&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;test-your-branch&quot;&gt;Test your branch&lt;/h1&gt;

&lt;p&gt;We are still in the &lt;code&gt;testing&lt;/code&gt; branch. 
We need to test our code to see if it worked. &lt;/p&gt;

&lt;p&gt;To do this, we will have to access the files locally and start a webserver. 
Go back to the SSH terminal and check to see that the earlier script finished its work. You&amp;#39;ll know because you will see a prompt and blinking cursor at the bottom. &lt;/p&gt;

&lt;p&gt;Switch into the root directory of your website repository. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd ../YOUR-GITHUB-USERNAME.github.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then run the following command. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;jekyll serve --host=0.0.0.0 --drafts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This starts a webserver and builds your site.
Then we need to find the address where you can see your site. &lt;/p&gt;

&lt;p&gt;If you right click on the container in your file tree and select &amp;quot;Info&amp;quot; it will bring up a document with two long links in it toward the bottom. 
These links let you see applications that your server is running. &lt;/p&gt;

&lt;p&gt;Click the first link, which looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://preview.2xgeb3y9x622zkt9z51g8y0twrpy14i6v8n6zf2i7e97ldi.box.codeanywhere.com&quot;&gt;http://preview.2xgeb3y9x622zkt9z51g8y0twrpy14i6v8n6zf2i7e97ldi.box.codeanywhere.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will give you a 404 error. 
This is because the default preview port for Jekyll is 4000. &lt;/p&gt;

&lt;p&gt;So, edit the link to read:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://preview.2xgeb3y9x622zkt9z51g8y0twrpy14i6v8n6zf2i7e97ldi.box.codeanywhere.com:4000&quot;&gt;http://preview.2xgeb3y9x622zkt9z51g8y0twrpy14i6v8n6zf2i7e97ldi.box.codeanywhere.com*&lt;em&gt;:4000&lt;/em&gt;*&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will then be able to see your site online. If you click on the link above while I am demonstrating this in class, you will see my site.&lt;/p&gt;

&lt;p&gt;This will allow you to see if your changes worked or not. 
If they did, and you like them, you can merge them back into the &lt;code&gt;master&lt;/code&gt; branch and then they will be live on your site when you push them up to GitHub. &lt;/p&gt;

&lt;p&gt;To kill the preview, press &lt;code&gt;CTRL+C&lt;/code&gt; in the SSH terminal where jekyll is running. &lt;/p&gt;

&lt;h1 id=&quot;merge-your-branch-into-master&quot;&gt;Merge your branch into master&lt;/h1&gt;

&lt;p&gt;To merge changes, switch back to the master branch. &lt;/p&gt;

&lt;p&gt;First, checkout the &lt;code&gt;master&lt;/code&gt; branch. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And make sure that you are in the right place. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see &lt;code&gt;master&lt;/code&gt; highlighted. &lt;/p&gt;

&lt;p&gt;Then merge the changes in:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And they should be made. 
Don&amp;#39;t forget to commit and push.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -a -m &amp;quot;merged testing into master&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;roll-back-a-change&quot;&gt;Roll back a change&lt;/h1&gt;

&lt;p&gt;We can roll back most changes. &lt;label for=&#39;revert&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;revert&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;jaw6. &lt;/span&gt;
The simplest way to do this it to just revert the last commit. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert &amp;lt;SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;for-tomorrow&quot;&gt;For tomorrow&lt;/h1&gt;

&lt;p&gt;We&amp;#39;re going to try a slightly different approach tomorrow. 
I&amp;#39;m going to cluster you in groups based on where you are in the process of completing assignment #1. 
It is okay if you are still early on: that is fine. 
I want to be able to collectively help you, though, and that will be easier to do if I know where you are and if you can help each other through tasks that are closer together in the overall workflow. &lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/web/2016/06/30/branching-and-merging/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/web/2016/06/30/branching-and-merging/</guid>
        
        <category>git</category>
        
        <category>GitHub</category>
        
        <category>web development</category>
        
        <category>workflows</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Developing and Deploying</title>
        <description>&lt;p&gt;Today we&amp;#39;re going to take the first steps toward actually getting our website up and running. 
We will also use this opportunity to discuss the development &amp;gt; testing &amp;gt; deployment workflow. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll be using Barry Clark&amp;#39;s tutorial as a reference, so you&amp;#39;ll want to have that pulled up in a separate window so that you can switch back and forth to it. &lt;/p&gt;

&lt;h1 id=&quot;fork&quot;&gt;Fork&lt;/h1&gt;

&lt;p&gt;We will do the same thing that we have previously done in GitHub and fork our chosen theme into our account as a starting place. &lt;/p&gt;

&lt;p&gt;That should be relatively straightforward now.&lt;/p&gt;

&lt;h1 id=&quot;configure&quot;&gt;Configure&lt;/h1&gt;

&lt;p&gt;Once we have the base theme forked, we need to make sure that the site is going to show up at the right address. &lt;/p&gt;

&lt;p&gt;The address that we want is &lt;code&gt;http://YOUR-GITHUB-USERNAME.github.io&lt;/code&gt;. This is the default user site address for GitHub pages. &lt;/p&gt;

&lt;p&gt;GH Pages will serve this site from code in the master branch of a repository in your account named the same as the fully qualified domain name (FQDN) or just the full URL to our desired site. &lt;/p&gt;

&lt;p&gt;Therefore, if your GH Pages user site defaults to &lt;code&gt;http://YOUR-GITHUB-USERNAME.github.io&lt;/code&gt; then we have to make a repository in your account titled &lt;code&gt;YOUR-GITHUB-USERNAME.github.io&lt;/code&gt;. 
The easiest way to do this is to just change the name of the theme repository that we just forked so that it matches what we need. &lt;/p&gt;

&lt;p&gt;To do this, click the settings tab on your repository page, enter a new name under &amp;quot;Repository name,&amp;quot; and then click &amp;quot;Rename.&amp;quot;&lt;/p&gt;

&lt;h2 id=&quot;_config.yml&quot;&gt;_config.yml&lt;/h2&gt;

&lt;p&gt;Once we are there, we should be able to look into &lt;code&gt;_config.yml&lt;/code&gt; file right in GitHub and make sure that our site settings are correct.
We will likely have to change three variables, if they exist: &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, and &lt;code&gt;baseurl&lt;/code&gt;.
These will be different for different themes, so we&amp;#39;ll look over this together in class. Basic principles are as follows:&lt;/p&gt;

&lt;p&gt;You want &lt;code&gt;url&lt;/code&gt; to match the desired URL for your site: &lt;code&gt;http://YOUR-GITHUB-USERNAME.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path&lt;/code&gt; specifies a path where files are held. 
For the GH Pages user site, it needs to have no value. You can either delete that line, comment it, or just put a set of double quotes to specify that Jekyll should not try to rewrite the links and append a subdirectory. It will look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path: &amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The same is true for &lt;code&gt;baseurl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All that these do is tell Jekyll where things are when it is trying to build the site. 
Remember, linking is dynamic in the build process, so Jekyll is trying to figure out how to tell your browser where to find stuff that it needs to render the site. &lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;

&lt;p&gt;Once you have your config set accordingly, then you should be able to look at your site at &lt;code&gt;http://YOUR-GITHUB-USERNAME.github.io&lt;/code&gt;. 
Don&amp;#39;t worry if it doesn&amp;#39;t work or if something looks weird. 
Nothing is broken in those cases, you&amp;#39;ll just need to troublshoot to figure out what is wrong. This is part of the developmet workflow. &lt;/p&gt;

&lt;h1 id=&quot;development&quot;&gt;Development&lt;/h1&gt;

&lt;p&gt;A &amp;quot;development workflow&amp;quot; has several stages that happen in order.&lt;label for=&#39;ghflow&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;ghflow&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;“Understanding the GitHub Flow.” GitHub Guides. Last modified December 12, 2013. &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;https://guides.github.com/introduction/flow/&lt;/a&gt;. &lt;/span&gt; 
We have been gearing up to think about our work in this context. &lt;/p&gt;

&lt;p&gt;A typical development workflow might conceptually look like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create new branch of source code for new feature&lt;/li&gt;
&lt;li&gt;Work on code for new feature in new branch &lt;/li&gt;
&lt;li&gt;Test feature and make fixes if necessary&lt;/li&gt;
&lt;li&gt;Run with feature in testing environment to ensure that feature works&lt;/li&gt;
&lt;li&gt;Get feedback about new feature and integrate suggestions if necessary&lt;/li&gt;
&lt;li&gt;Merge new feature into main workflow&lt;/li&gt;
&lt;li&gt;New feature is live in production&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;next-time&quot;&gt;Next time&lt;/h1&gt;

&lt;p&gt;We&amp;#39;re going to learn tomorrow how to incorporate branching, testing, and merging by setting up a development workflow like the one described above. &lt;/p&gt;

&lt;p&gt;To prepare for this, I would like you to read the Gist linked in the margin, but I would also like you to do some searching online about how different developers managed their workflows. {sidenote &amp;#39;workflow&amp;#39; &amp;#39;blackfalcon. “Git Basics - a General Workflow.” Gist. Accessed June 29, 2016. &lt;a href=&quot;https://gist.github.com/blackfalcon/8428401.&amp;#x27;&quot;&gt;https://gist.github.com/blackfalcon/8428401.&amp;#39;&lt;/a&gt;}
To this end you might Google things like &amp;quot;development workflow&amp;quot; or &amp;quot;project development.&amp;quot;
See what you can find. 
There is a ton of relevant information on this topic out in the Internet.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/web/2016/06/29/developing-deploying-branching/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/web/2016/06/29/developing-deploying-branching/</guid>
        
        <category>git</category>
        
        <category>GitHub</category>
        
        <category>Jekyll</category>
        
        <category>development</category>
        
        <category>workflow</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Visual styling for the web</title>
        <description>&lt;p&gt;For most of class today, we will spend time creating our base site and then exploring ways that we can change and customize the style to our liking. &lt;/p&gt;

&lt;p&gt;We&amp;#39;ll learn a little bit about CSS and about linking resources so that they show up where we want them. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h1 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h1&gt;

&lt;p&gt;Once you have chosen a Jekyll theme for your site, we will need to fork the theme, make appropriate changes to turn it into our own, and then we can get to work on customizing the look and feel of the site. &lt;/p&gt;

&lt;p&gt;When we make changes to Jekyll&amp;#39;s configuration, we are ostensibly telling it where to find different necessary files for rendering the site, like our CSS file. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a look at different ways of linking. &lt;/p&gt;

&lt;h1 id=&quot;linking&quot;&gt;Linking&lt;/h1&gt;

&lt;p&gt;Linking is what makes the Internet what it is in terms of how information is organized. 
Without links, we would have to know the location of every single thing we wish to get to. 
We would have to index everything: that is, we would need a list. 
Linking allows us to move between resources, call and embed resources within one another, and in some cases find resources based on their relationships. &lt;/p&gt;

&lt;h3 id=&quot;relative-and-absolute-paths&quot;&gt;Relative and absolute paths&lt;/h3&gt;

&lt;p&gt;We have choices about how we can link to resources. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at the links in the examples on the last page:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/styles.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js/scripts.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/pretty.img&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A pretty picture&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Return home.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are all examples of relative paths. 
This means that they assume that the files referenced here are located near our index page. &lt;/p&gt;

&lt;p&gt;If we were to represent the same links with absolute paths, we would have to add the domain name / hostname also. 
See below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.somewebsite.com/css/styles.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.somewebsite.com/js/scripts.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.somewebsite.com/images/pretty.img&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A pretty picture&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.somewebsite.com/index.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Return home.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s consider the advantages and disadvantages of each of these approaches and ask these questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What happens if we have to change our doman name or move to a different server?&lt;/li&gt;
&lt;li&gt;Is there perhaps a way to automate such a change and still provide an absolute path?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;#39;s move on to working with visual elements.&lt;/p&gt;

&lt;h1 id=&quot;css&quot;&gt;CSS&lt;/h1&gt;

&lt;p&gt;CSS is an acronym for &amp;quot;Cascading Style Sheet.&amp;quot;&lt;/p&gt;

&lt;p&gt;If HTML is the medium for web content, then CSS is the medium for the visual styling of the web. 
Whenever a website looks like anything other than just a blank page, there is CSS involved. &lt;/p&gt;

&lt;p&gt;We will continue to use a combination of Markdown, HTML5 and CSS3 to construct our very own web pages. &lt;/p&gt;

&lt;h1 id=&quot;for-next-time&quot;&gt;For next time&lt;/h1&gt;

&lt;p&gt;I want you to continue to work with your site and actually begin creating some content: write a blog post. &lt;/p&gt;

&lt;p&gt;This involves having an idea, making an outline of what you want to say about that idea, committing some text, referencing outside information, and maybe putting a picture in to give a visual anchor to your text.&lt;/p&gt;

&lt;p&gt;I would also like you to move through the W3Schools HTML5 and CSS3 tutorials on your own, outside of class.&lt;label for=&#39;css-tutorial&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;css-tutorial&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;“HTML Tutorial.” W3Schools. &lt;a href=&quot;http://www.w3schools.com/html/default.asp&quot;&gt;http://www.w3schools.com/html/default.asp&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;“CSS Tutorial.” W3Schools. &lt;a href=&quot;http://www.w3schools.com/css/default.asp&quot;&gt;http://www.w3schools.com/css/default.asp&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/web/2016/06/28/jekyll-css-html/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/web/2016/06/28/jekyll-css-html/</guid>
        
        <category>Jekyll</category>
        
        <category>CSS</category>
        
        <category>HTML</category>
        
        <category>Markdown</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Websites, Markup, and Markdown</title>
        <description>&lt;p&gt;This week&amp;#39;s tasks will involve some very simple coding (markup, really) and continued exploration and use of our system administration skills. &lt;/p&gt;

&lt;p&gt;Last Friday we learned how to set up a very basic website using Jekyll and GitHub pasges. 
This week we will expand on that significantly, learn how to use markup to change the style of our content, and then learn to publish content to the web. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;p&gt;First things first, we need to know some things about markup. &lt;/p&gt;

&lt;h1 id=&quot;markup-and-markdown&quot;&gt;Markup and Markdown&lt;/h1&gt;

&lt;p&gt;Markup has been used over the last several decades to enhance plaintext for web use. &lt;/p&gt;

&lt;p&gt;Today we will consider some of the basics. &lt;/p&gt;

&lt;p&gt;Markdown is a markup language. 
We had a brief introduction to it last week when we established our first repositories on GitHub. &lt;/p&gt;

&lt;h2 id=&quot;why-are-we-learning-markdown?&quot;&gt;Why are we learning Markdown?&lt;/h2&gt;

&lt;p&gt;For starters, Markdown is easier to use than HTML or other markup languages. 
It doesn&amp;#39;t require complicated tags, which have a high potential for typographical error. &lt;/p&gt;

&lt;p&gt;Jon Mitchell posits the three following good and compelling reasons that everyone should learn Markdown:&lt;label for=&#39;reasons&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;reasons&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;Mitchell, Jon. “3 Reasons Why Everyone Needs to Learn Markdown - ReadWrite.” ReadWrite. Last modified April 17, 2012. &lt;a href=&quot;http://readwrite.com/2012/04/17/why-you-need-to-learn-markdown/&quot;&gt;http://readwrite.com/2012/04/17/why-you-need-to-learn-markdown/&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is easy to read. &lt;/li&gt;
&lt;li&gt;You will make fewer errors.&lt;/li&gt;
&lt;li&gt;It helps us to get rid of buggy, crashy, loss-prone content management systems (CMS). &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of the above boils down to a simple comparison that Mitchell makes:&lt;/p&gt;

&lt;p&gt;HTML:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;h1&amp;gt;Why &amp;lt;em&amp;gt;you&amp;lt;/em&amp;gt; should use Markdown to write your next blog post&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=”http://daringfireball.net/projects/markdown/”&amp;gt;Markdown&amp;lt;/a&amp;gt; is just so dang legible, it will make your &amp;lt;em&amp;gt;whole life&amp;lt;/em&amp;gt; easier. &amp;lt;strong&amp;gt;I promise.&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Why *you* should use Markdown to write your next blog post

[Markdown][1] is just so dang legible, it will make your *whole life* easier. **I promise.**


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above examples render the same thing when parsed. Which would you rather use? &lt;/p&gt;

&lt;p&gt;We will go over some of the basics in class today, but I would also like you to review the resources listed here independently, outside of class. &lt;label for=&#39;markdown&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;markdown&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;“Mastering Markdown.” GitHub Guides. Last modified January 15, 2014. Accessed June 27, 2016. &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;https://guides.github.com/features/mastering-markdown/&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;This guide is oriented toward GitHub, but the skills represented there extend well beyond that context. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We will work interchangeably in HTML and Markdown over the course of this week.&lt;/p&gt;

&lt;h1 id=&quot;html5&quot;&gt;HTML5&lt;/h1&gt;

&lt;p&gt;HTML is an initialism for &amp;quot;HyperText Markup Language.&amp;quot;&lt;/p&gt;

&lt;p&gt;&amp;quot;Hypertext&amp;quot; is text that contains links to other text.&lt;label for=&#39;markup-history&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;markup-history&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;Keith, Jeremy. “A Brief History of Markup.” A List Apart 305 (May 4, 2010). &lt;a href=&quot;http://alistapart.com/article/a-brief-history-of-markup&quot;&gt;http://alistapart.com/article/a-brief-history-of-markup&lt;/a&gt;. &lt;/span&gt;
The Web, as we know it, relies on hypertext to for us to communicate with systems and with other humans. 
It is the medium of Web content.&lt;/p&gt;

&lt;p&gt;HTML5 is the latest iteration of a standard related to the writing of web content.
Web markup has a long history over the last few decades, beginning with Tim Berners-Lee, one of the fathers of the modern web (and the inventor of HTML).
Berners-Lee proposed the creation of an information management system for the European Agency for Nuclear Research (CERN) in the late 1980&amp;#39;s.&lt;label for=&#39;html-origin&#39; class=&#39;margin-toggle sidenote-number&#39;&gt;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;html-origin&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;sidenote&#39;&gt;Berners-Lee, Tim. Information Management: A Proposal. European Agency for Nuclear Research (CERN), March 1989. Accessed June 27, 2016. &lt;a href=&quot;https://www.w3.org/History/1989/proposal.html&quot;&gt;https://www.w3.org/History/1989/proposal.html&lt;/a&gt;. &lt;/span&gt; &lt;/p&gt;

&lt;p&gt;When we write Markdown and then post it to GitHub, a system actually translates it into HTML5. &lt;/p&gt;

&lt;h1 id=&quot;for-next-time&quot;&gt;For next time&lt;/h1&gt;

&lt;p&gt;I would like you to look at this tutorial about creating a website using Jekyll and GitHub Pages. &lt;/p&gt;

&lt;p&gt;Clark, Barry. “Build A Blog With Jekyll And GitHub Pages – Smashing Magazine.” Smashing Magazine. Last modified August 1, 2014. Accessed June 27, 2016. &lt;a href=&quot;https://www.smashingmagazine.com/2014/08/build-blog-jekyll-github-pages/&quot;&gt;https://www.smashingmagazine.com/2014/08/build-blog-jekyll-github-pages/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have already done this in a very rudimentary way, but we will do it again to create a better final product. &lt;/p&gt;

&lt;p&gt;Please also look at these themes and choose one for your site. Some have dynamic navigation (those are listed first == easy). You will modify them heavily. &lt;/p&gt;

&lt;h2 id=&quot;some-easy-themes&quot;&gt;Some easy themes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/basic/&quot;&gt;http://jekyllthemes.org/themes/basic/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/trading/&quot;&gt;http://jekyllthemes.org/themes/trading/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/devjournal/&quot;&gt;http://jekyllthemes.org/themes/devjournal/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/gravity/&quot;&gt;http://jekyllthemes.org/themes/gravity/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-challenging-themes&quot;&gt;More challenging themes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/jekyll-clean/&quot;&gt;http://jekyllthemes.org/themes/jekyll-clean/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/thinkspace/&quot;&gt;http://jekyllthemes.org/themes/thinkspace/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/vitae/&quot;&gt;http://jekyllthemes.org/themes/vitae/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/dbyll/&quot;&gt;http://jekyllthemes.org/themes/dbyll/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/blackdoc/&quot;&gt;http://jekyllthemes.org/themes/blackdoc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/themes/daktilo/&quot;&gt;http://jekyllthemes.org/themes/daktilo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good advice: &lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&amp;quot;Write the best code possible today and be completely unattached to it and willing to delete it tomorrow.&amp;quot;&lt;a href=&quot;https://t.co/mBAJhip0KP&quot;&gt;https://t.co/mBAJhip0KP&lt;/a&gt;&lt;/p&gt;&amp;mdash; Adam Wathan (@adamwathan) &lt;a href=&quot;https://twitter.com/adamwathan/status/747429538930393088&quot;&gt;June 27, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/web/2016/06/27/websites-and-markup/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/web/2016/06/27/websites-and-markup/</guid>
        
        <category>websites</category>
        
        <category>markup</category>
        
        <category>markdown</category>
        
        <category>html</category>
        
        <category>css</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Lab #1: Git and GitHub</title>
        <description>&lt;p&gt;Today we&amp;#39;re going to learn how to fork, clone, and push changes to a repository on GitHub using git. 
We do this in preparation for creating personal websites that will be hosted by GitHub pages. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h1 id=&quot;fork&quot;&gt;Fork&lt;/h1&gt;

&lt;p&gt;The first thing that we are going to do today is fork some code that will allow us to have something to work with in CodeAnywhere later.
We&amp;#39;ll use this as an opportunity to get wome web code and see what that looks like. &lt;/p&gt;

&lt;p&gt;You are not committing to anything today: this is just for practice. 
We&amp;#39;ll start by going to this repo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/henrythemes/jekyll-starter-theme&quot;&gt;https://github.com/henrythemes/jekyll-starter-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the repo for a very, very simple Jekyll web theme. 
We will us this as a starter theme to practice with. &lt;/p&gt;

&lt;p&gt;Once you are at the above repo, click the &amp;quot;Fork&amp;quot; button and select your username when prompted to make a copy of the repo in your account.&lt;label for=&#39;fork&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;fork&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;&lt;img src=&quot;/assets/ref-images/fork.png&quot; alt=&quot;Click the &amp;quot;fork&amp;quot; button.&quot;&gt; &lt;/span&gt; &lt;/p&gt;

&lt;p&gt;After a few seconds you will be taken to the repo page for the copy that you have made in your account. &lt;/p&gt;

&lt;h1 id=&quot;clone&quot;&gt;Clone&lt;/h1&gt;

&lt;p&gt;Once there, click the big green &amp;quot;Clone or Download&amp;quot; button, select &amp;quot;Use SSH,&amp;quot; and copy the resulting link. &lt;label for=&#39;clone&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;clone&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;&lt;img src=&quot;/assets/ref-images/clone.png&quot; alt=&quot;Click the &amp;quot;fork&amp;quot; button.&quot;&gt; &lt;/span&gt; 
It will look like the link in the image on the right. &lt;/p&gt;

&lt;p&gt;Then, switch over to CodeAnywhere, make sure you&amp;#39;re logged in, and then right click on your container and open and SSH terminal from the menu. &lt;/p&gt;

&lt;p&gt;In your &amp;quot;workspace&amp;quot; directory, type the following command, and paste your link in after, so that it looks like this: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone git@github.com:YOUR-GITHUB-USERNAME/jekyll-starter-theme.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This makes a copy of the repository that you just forked to your local workspace in CodeAnywhere. 
This is called cloning. &lt;/p&gt;

&lt;p&gt;Then descend into the directory:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd jekyll-starter-theme&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And explore what is in there:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -lah&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see a &lt;code&gt;_config.yml&lt;/code&gt; file somewhere in the directory. 
This file is filled with variables that Jekyll reads to structure the information made by your webpage. &lt;/p&gt;

&lt;p&gt;The basic structure of variables for Jekyll is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;variable-name:   &amp;quot;variable value&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I want you to change the title variable to your name or whatever you like.
Change the subtitle as well. &lt;/p&gt;

&lt;p&gt;From this:&lt;label for=&#39;test&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;test&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;The first thing that we are going to do today is fork &lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# site.title

title:    &#39;Jekyll Starter Theme&#39;
subtitle: &#39;Another Minimalistic Static Site Quick Starter Theme&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# site.title

title:    &#39;YOUR-NAME&#39;
subtitle: &#39;Some subtitle I just made up!&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I want you to change the &lt;code&gt;url&lt;/code&gt; variable so that this will show up at the address associated with your GitHub repo.&lt;/p&gt;

&lt;p&gt;So change this: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;url:   &amp;#39;http://henrythemes.github.io/jekyll-starter-theme&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url:   &amp;#39;http://YOUR-GITHUB-USERNAME.github.io/jekyll-starter-theme&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have made those changes, then save the file and we will push it back up to GitHub.&lt;/p&gt;

&lt;h1 id=&quot;push&quot;&gt;Push&lt;/h1&gt;

&lt;p&gt;So in order to record these changes and get them into our remote repo on GitHub, we have to first go through the normal commit process. 
First, add the files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add -v *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then commit the changes (remember to leave a message for yourself):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -a -m &amp;quot;update config&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we have to push the changes upstream:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that should be that. &lt;/p&gt;

&lt;h1 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;/h1&gt;

&lt;p&gt;You should be able to see this web code rendered as a webpage now. 
Try going to the address that corresponds to the GH pages site associated with this repository. It will look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://YOUR-GITHUB-USERNAME.github.io/jekyll-starter-theme/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And there you should see a site with the title and subtitle that you assigned in the &lt;code&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;h1 id=&quot;for-next-time&quot;&gt;For next time&lt;/h1&gt;

&lt;p&gt;I would like you to have a look at some tutorials and guides to Markdown for Monday. &lt;/p&gt;

&lt;p&gt;Kirk Strobeck&amp;#39;s page describes the origin and intent of Markdown, and provides links to useful resources. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://whatismarkdown.com/&quot;&gt;http://whatismarkdown.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dan Harper gives a good introduction to how Markdown is used and what it looks like in the wild. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/markdown-the-ins-and-outs--net-25482&quot;&gt;http://code.tutsplus.com/tutorials/markdown-the-ins-and-outs--net-25482&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/24/git-and-github-lab/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/24/git-and-github-lab/</guid>
        
        <category>version control</category>
        
        <category>git</category>
        
        <category>GitHub</category>
        
        <category>Jekyll</category>
        
        <category>web design</category>
        
        
        <category>Basics</category>
        
      </item>
    
      <item>
        <title>Networks</title>
        <description>&lt;p&gt;We&amp;#39;ve discussed a bit about how servers and clients operate. 
Now we&amp;#39;ll look at what happens when we put lots of servers and lots of clients together. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;p&gt;A network is a relatively simple concept with some complex underlying technologies. 
Each computer or device in a network can be referred to as a &amp;quot;node.&amp;quot; &lt;/p&gt;

&lt;p&gt;Information is transmitted through networks in something called a &amp;quot;packet.&amp;quot;&lt;/p&gt;

&lt;p&gt;Packets of information are sent from node to node through paths called &amp;quot;routes.&amp;quot;&lt;/p&gt;

&lt;p&gt;A &amp;quot;router&amp;quot; is a device that receives packets and sends them on to their destination. &lt;/p&gt;

&lt;h2 id=&quot;types-of-networks-(topology)&quot;&gt;Types of networks (topology)&lt;/h2&gt;

&lt;p&gt;Different networks have different physical or virtual arrangements of devices.&lt;label for=&#39;nettypes&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;nettypes&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;Examples of different netwotk topologies&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/9/97/NetworkTopologies.svg&quot; target=&quot;_blank&quot; &gt;&lt;img width=&quot;200px&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/NetworkTopologies.svg/200px-NetworkTopologies.svg.png&quot; alt=&quot;Types of networks&quot; /&gt;&lt;/a&gt; &lt;/span&gt; &lt;/p&gt;

&lt;p&gt;Most of the networks that we deal with on a given day are star networks. 
They might be connected to other star networks so that you will end up with a star of stars. 
In these networks each device connects to a node and then that node sends them elsewhere on the network. 
The node that is used to connect is usually either a router or switch of some kind. 
Connections occur through a single path. 
If a connection is lost, either through physical network failure or through software failure, it is not possible to re-establish the connection unless the route is restored. &lt;/p&gt;

&lt;p&gt;Most local area networks (LANs) operate in this way. &lt;/p&gt;

&lt;p&gt;Some networks allow any device to connect to any other device. 
These are called mesh networks. &lt;/p&gt;

&lt;p&gt;A mesh network is self-healing, which means that if a connection is dropped between any two given devices, the same connection can be re-established through a different route. 
These networks are not typically in use on LANs, but there is a very large one that we interact with on a near-continuous basis.&lt;/p&gt;

&lt;h1 id=&quot;inter-networks&quot;&gt;Inter-networks&lt;/h1&gt;

&lt;p&gt;Inter-networks have several layers. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Link-layer: communication between hosts on a single network&lt;/li&gt;
&lt;li&gt;Internet layer: communication between networks &lt;/li&gt;
&lt;li&gt;Transport layer: communication between hosts&lt;/li&gt;
&lt;li&gt;Application layer: communication between processes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The communication protocols that are used to govern how information is routed through these layers are called Transmission Control Protocol and Internet Protocol (TCP/IP).&lt;/p&gt;

&lt;p&gt;TCP/IP governs the way that all information is routed through networks. &lt;/p&gt;

&lt;p&gt;These protocols are how we derive addresses on networks. 
Different networks have different modes of addressing, but they use a similar structure. 
It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;192.168.1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each block of numbers in that string of numbers and dots is called a quad and can be used either to represent a device or a subnet. 
The first three quads might represent subnets of subnets and the last represents a subnet of addresses. &lt;/p&gt;

&lt;p&gt;Each number can range from 0-255, meaning that it can address a space with 256 individual devices or subnets in the network. 
The limit is due to the fact that each quad is actually a binary number which can address an 8-bit space. 
8-bit means that in each quad there are 8 individual binary bits or on/off pairs that can be flipped to record the number. 
This means that the address above actually reads like this in binary:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;11000000.10101000.00000001.00000001&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With this address structure, we can address 256&lt;sup&gt;4&lt;/sup&gt;, or 256*256*256*256 = 4,294,967,296, addresses.&lt;label for=&#39;256&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;256&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;Why 256 addresses?&lt;br/&gt;&lt;br/&gt;Wilson, Gray. “The Story of 256.” &lt;a href=&quot;http://256.com/&quot;&gt;http://256.com/&lt;/a&gt;. Last modified 2002. &lt;a href=&quot;http://256.com/256.html&quot;&gt;http://256.com/256.html&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Knowing the numbers in sequence allows for traffic to be routed from one subnet to another. 
The whole string of numebrs together is the address for an individual host/node on the network. &lt;/p&gt;

&lt;h2 id=&quot;names&quot;&gt;Names&lt;/h2&gt;

&lt;p&gt;So how is it that when we type &lt;code&gt;http://www.unc.edu&lt;/code&gt; into a browser navigation bar that we end up at UNC&amp;#39;s website? &lt;/p&gt;

&lt;p&gt;This is achieved through something called Dynamic Name Service (DNS).&lt;/p&gt;

&lt;p&gt;DNS maps domain or host names onto IP addresses, which allows us to use human-readable names for places on a network. 
We use this on the Internet so that we can type &lt;code&gt;unc.edu&lt;/code&gt; instead of having to remember that UNC&amp;#39;s webserver is located at &lt;code&gt;152.19.230.139&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;DNS is hierarchical and uses a mesh in order to maintain service globally. 
Most institutions run their own cacheing nameservers which allow faster LAN access to routing information for domain names. &lt;/p&gt;

&lt;p&gt;There are 13 &amp;quot;root name servers&amp;quot; globally that mirror each other.&lt;label for=&#39;dnsroots&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;dnsroots&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;List of DNS root servers&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Root_name_server#Root_server_addresses&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; &lt;/span&gt;
When you make a change to the DNS information related to a site or host, it propagates through this network of root servers. &lt;/p&gt;

&lt;p&gt;When we type &lt;code&gt;unc.edu&lt;/code&gt; into a browser or other network tool, a query is made against a DNS server somewhere and the DNS server then tells us where that domain is located physically (or in some cases virtually).
Then a request is made to the nearest routing host on our network which sends the request to the next and to the next until it hits its destination. 
When the request arrives at its intended target, that host responds by attempting to fulfill the request and route the information back to the origin of the request. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Et voila!&lt;/em&gt; It all happens in the blink of an eye.&lt;/p&gt;

&lt;p&gt;Next we will look at some methods for figuring out what is happening on a network during that blink. &lt;/p&gt;

&lt;h1 id=&quot;network-tools&quot;&gt;Network tools&lt;/h1&gt;

&lt;p&gt;Next week, we will explore networks a bit more and talk about some of the tools that we can and will use to better understand the networks around us. &lt;/p&gt;

&lt;p&gt;For the rest of the session today, we&amp;#39;ll be exploring more using git and GitHub. &lt;/p&gt;

&lt;h1 id=&quot;for-next-time&quot;&gt;For Next Time&lt;/h1&gt;

&lt;p&gt;Though we will go over this in class, I would like you to review the &amp;quot;Hello World&amp;quot; GitHub Guide on your own time.&lt;label for=&#39;hello&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;hello&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;“Hello World.” GitHub Guides. Last modified April 7, 2016. Accessed June 23, 2016. &lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot;&gt;https://guides.github.com/activities/hello-world/&lt;/a&gt;. &lt;/span&gt; &lt;/p&gt;

&lt;p&gt;We will use some of its principles in the Friday lab to get ourselves set up for the next assignment: building a web page from scratch (sort of).&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/23/networks/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/23/networks/</guid>
        
        <category>networking</category>
        
        <category>networks</category>
        
        <category>inter-networks</category>
        
        <category>GitHub</category>
        
        
        <category>Basics</category>
        
      </item>
    
      <item>
        <title>Version Control</title>
        <description>&lt;p&gt;Version control systems allow us to track and see the changes to a given document or set of files over time. 
This can be useful in situations where you wish to roll back changes or identify the point of origin for something problematic. &lt;/p&gt;

&lt;p&gt;It is also helpful when you are collaborating and want to be able to keep track of the work being done and changes being made by a group of people. &lt;/p&gt;

&lt;p&gt;Version control can exist in a standalone system or it can be networked and distributed. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h2 id=&quot;track-changes&quot;&gt;Track changes&lt;/h2&gt;

&lt;p&gt;One expression of version control that we are probably all familiar with is the &amp;quot;Track Changes&amp;quot; function in MSOffice. 
It works if one person is using it to track changes between writing session. 
It also might work if two people are exchanging a document and each making changes when they have the document in their possession. 
Each handoff operates like a physical handoff in this case. &lt;/p&gt;

&lt;p&gt;But when you try to track changes with two people and then merge those documents, things become tricky. 
Which changes take precedence? 
How do you merge them together when you have both rewritten the same sentence? &lt;/p&gt;

&lt;p&gt;The process of merging becomes very difficult, very quickly and since the design of that interface wants to hide what is going on underneath, you might miss something and end up with a document that you did not mean to leave or leave something out accidentally. &lt;/p&gt;

&lt;h2 id=&quot;software-source-code&quot;&gt;Software source code&lt;/h2&gt;

&lt;p&gt;In the software development world, there are a number of systems that allow development teams to make small, incremental changes to the source code for a piece of software without losing work, breaking each others code, or stepping on each others fingers. &lt;/p&gt;

&lt;p&gt;The basic idea is that when you wish to make changes to a set of source code files, you have to check them out. 
This is just like checking out a library book, except that there are an infinite number of copies available and you can write on the pages. 
The object that you check out is called a repository. 
When you check it out, you get the source code files themselves, but you also get a whole bunch of metadata about them. 
The metadata includes information about when and how changes and merges have been made to the files as well as any user-generated information. &lt;/p&gt;

&lt;p&gt;Once checked out, you can make changes to the source files and then compile or test to make sure that your changes work. 
Then, once tested, you check them back in. 
Sometimes, the check-in process is fully automated, meaning that no human has to look to make sure that your changes make sense. 
Other time, the check-in needs to be verified. 
There are compelling reasons to use either of these scenarios. &lt;/p&gt;

&lt;p&gt;In such systems, each commit, or incremental change, is registered with a unique identifier. 
This means that the change is tracked and cannot be confused with any other change at any other time. &lt;/p&gt;

&lt;p&gt;When multiple parties are working on the same code, merging can be confusing, unless the changes are properly tracked. 
Version control systems allow us to make sure that merges go as smoothly as possible. &lt;/p&gt;

&lt;h2 id=&quot;distributed-version-control&quot;&gt;Distributed version control&lt;/h2&gt;

&lt;p&gt;In a fully distributed version control system (DVCS), multiple copies of the same repository can exist on different systems with different operators and still be elegantly reconciled as the same object. 
This means that work can be conducted asynchronously and then merged together later. 
Then length of time and amount of work done on each copy will have an effect on how easy or difficult it will be to merge the source back together. 
It is likely that if a long time occurs between merges, there will be some issues that crop up, particularly if a lot of changes are made. &lt;/p&gt;

&lt;p&gt;It is a good idea to keep your repositories up-to-date. 
It also acts as an easy back up system, if you are storing the repository off-site somewhere. &lt;/p&gt;

&lt;h3 id=&quot;distributed-version-control-for-document-processing&quot;&gt;Distributed version control for document processing&lt;/h3&gt;

&lt;p&gt;Version control of this kind is not just for software development. 
It is possible to use it to manage your own workflow in creating and editing documents. 
It also works for managing different versions of datasets, from raw data to clean, ready-to-analyze data. &lt;/p&gt;

&lt;p&gt;In this course, we are going to use such a system to manage and back up our work.  &lt;/p&gt;

&lt;p&gt;You should have read through the following:&lt;/p&gt;

&lt;p&gt;Wynn, J. (2014, May 25). &lt;a href=&quot;http://wildlyinaccurate.com/a-hackers-guide-to-git/&quot;&gt;A Hacker&amp;#39;s Guide to Git&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We will disscuss the fundamental concepts about version control contained in that article. &lt;/p&gt;

&lt;p&gt;Then, for the rest of today&amp;#39;s class we are going to experiment with the version control systems that we will operate on and learn how to get our information into them and manage it once it is there.&lt;/p&gt;

&lt;h1 id=&quot;git&quot;&gt;git&lt;/h1&gt;

&lt;p&gt;We will use Git as our version control system in this class. 
Git has an interesting past and was developed out of necessity. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A Short History of Git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As with many great things in life, Git began with a bit of creative destruction and fiery controversy.&lt;/p&gt;

&lt;p&gt;The Linux kernel is an open source software project of fairly large scope. For most of the lifetime of the Linux kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files. In 2002, the Linux kernel project began using a proprietary DVCS called BitKeeper.&lt;/p&gt;

&lt;p&gt;In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool’s free-of-charge status was revoked. This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper. Some of the goals of the new system were as follows:&lt;/p&gt;

&lt;p&gt;Speed&lt;/p&gt;

&lt;p&gt;Simple design&lt;/p&gt;

&lt;p&gt;Strong support for non-linear development (thousands of parallel branches)&lt;/p&gt;

&lt;p&gt;Fully distributed&lt;/p&gt;

&lt;p&gt;Able to handle large projects like the Linux kernel efficiently (speed and data size)&lt;/p&gt;

&lt;p&gt;Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. It’s incredibly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development (&lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git&quot;&gt;Chacon &amp;amp; Straub, 2014&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the development of Git is tied to the development of the Linux kernel, but it doesn&amp;#39;t end there. 
It has come to be used in millions of projects and development workflows. 
Its versatility has also inspired people to develop new layers of interaction to work with it. 
We will discuss and explore one of those today and then use it for the rest of the semester. &lt;/p&gt;

&lt;p&gt;First, though, lets explore Git, starting with the elegantly designed &lt;a href=&quot;http://rogerdudler.github.io/git-guide/&quot;&gt;Git: The Simple Guide&lt;/a&gt; by Roger Dudler.&lt;/p&gt;

&lt;p&gt;A more advanced and quite elegant Git tutorial is available here: &lt;a href=&quot;https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config&quot;&gt;Git Tutorials and Training - Atlassian&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;github&quot;&gt;GitHub&lt;/h1&gt;

&lt;p&gt;GitHub is a platform that allows for users to keep copies of their open source, plaintext repositories online, in a single centralized location. 
It also adds a social interaction layer to the process of managing version-controlled source files. &lt;/p&gt;

&lt;p&gt;It is useful for (and used by) software development projects as well as other plaintext-based projects, such as collaborative authoring of books and articles. &lt;/p&gt;

&lt;p&gt;It is particularly good for keeping track of projects that involve both plaintext source code or markup and files related to work that will be published using that code. &lt;/p&gt;

&lt;p&gt;Today we are going to learn to set up a repository locally&lt;/p&gt;

&lt;p&gt;Tomorrow we will learn to push it to GitHub. 
We will also learn to set up a repository remotely on GitHub and then copy it locally. &lt;/p&gt;

&lt;p&gt;For this purpose, we will follow this guide, for the most part:  &lt;/p&gt;

&lt;p&gt;Orsini, L. (2013). &lt;a href=&quot;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&quot;&gt;GitHub For Beginners: Don&amp;#39;t Get Scared, Get Started&lt;/a&gt;. Retrieved from &lt;a href=&quot;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&quot;&gt;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has much the same information as some of the other articles and books referenced in our course site, but it strings the different parts together and makes for a useful review resource.&lt;/p&gt;

&lt;p&gt;Since we will have already created repos, we may want to have a look at this to see how we can get our repo into GitHub: &lt;a href=&quot;https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/&quot;&gt;https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/22/git/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/22/git/</guid>
        
        <category>version control</category>
        
        <category>git</category>
        
        <category>shell commands</category>
        
        
        <category>Basics</category>
        
      </item>
    
  </channel>
</rss>
