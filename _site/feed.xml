<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools for Information Literacy</title>
    <description>Tools and concepts for information literacy. Includes software use and maintenance, computer applications, and networked information systems.</description>
    <link>http://inls161.johndmart.in/</link>
    <atom:link href="http://inls161.johndmart.in/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 26 Jun 2016 15:32:11 -0400</pubDate>
    <lastBuildDate>Sun, 26 Jun 2016 15:32:11 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Lab #1: Git and GitHub</title>
        <description>&lt;p&gt;Today we&amp;#39;re going to learn how to fork, clone, and push changes to a repository on GitHub using git. 
We do this in preparation for creating personal websites that will be hosted by GitHub pages. &lt;/p&gt;

&lt;h1 id=&quot;fork&quot;&gt;Fork&lt;/h1&gt;

&lt;p&gt;The first thing that we are going to do today is fork some code that will allow us to have something to work with in CodeAnywhere later.
We&amp;#39;ll use this as an opportunity to get wome web code and see what that looks like. &lt;/p&gt;

&lt;p&gt;You are not committing to anything today: this is just for practice. 
We&amp;#39;ll start by going to this repo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/henrythemes/jekyll-starter-theme&quot;&gt;https://github.com/henrythemes/jekyll-starter-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are at the above repo, click the &amp;quot;Fork&amp;quot; button and select your username when prompted to make a copy of the repo in your account.&lt;label for=&#39;fork&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;fork&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;&lt;img src=&quot;/assets/ref-images/fork.png&quot; alt=&quot;Click the &amp;quot;fork&amp;quot; button.&quot;&gt; &lt;/span&gt; &lt;/p&gt;

&lt;p&gt;After a few seconds you will be taken to the repo page for the copy that you have made in your account. &lt;/p&gt;

&lt;h1 id=&quot;clone&quot;&gt;Clone&lt;/h1&gt;

&lt;p&gt;Once there, click the big green &amp;quot;Clone or Download&amp;quot; button, select &amp;quot;Use SSH,&amp;quot; and copy the resulting link. &lt;label for=&#39;clone&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;clone&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;&lt;img src=&quot;/assets/ref-images/clone.png&quot; alt=&quot;Click the &amp;quot;fork&amp;quot; button.&quot;&gt; &lt;/span&gt; 
It will look like the link in the image on the right. &lt;/p&gt;

&lt;p&gt;Then, switch over to CodeAnywhere, make sure you&amp;#39;re logged in, and then right click on your container and open and SSH terminal from the menu. &lt;/p&gt;

&lt;p&gt;In your &amp;quot;workspace&amp;quot; directory. &lt;/p&gt;

&lt;h1 id=&quot;push&quot;&gt;Push&lt;/h1&gt;

&lt;h1 id=&quot;for-next-time&quot;&gt;For next time&lt;/h1&gt;

&lt;p&gt;I would like you to have a look at some tutorials and guides to Markdown for Monday. &lt;/p&gt;

&lt;p&gt;Kirk Strobeck&amp;#39;s page describes the origin and intent of Markdown, and provides links to useful resources. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://whatismarkdown.com/&quot;&gt;http://whatismarkdown.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dan Harper gives a good introduction to how Markdown is used and what it looks like in the wild. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/markdown-the-ins-and-outs--net-25482&quot;&gt;http://code.tutsplus.com/tutorials/markdown-the-ins-and-outs--net-25482&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/24/git-and-github-lab/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/24/git-and-github-lab/</guid>
        
        <category>version control</category>
        
        <category>git</category>
        
        <category>GitHub</category>
        
        <category>Jekyll</category>
        
        <category>web design</category>
        
        
        <category>Basics</category>
        
      </item>
    
      <item>
        <title>Networks</title>
        <description>&lt;p&gt;We&amp;#39;ve discussed a bit about how servers and clients operate. 
Now we&amp;#39;ll look at what happens when we put lots of servers and lots of clients together. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;p&gt;A network is a relatively simple concept with some complex underlying technologies. 
Each computer or device in a network can be referred to as a &amp;quot;node.&amp;quot; &lt;/p&gt;

&lt;p&gt;Information is transmitted through networks in something called a &amp;quot;packet.&amp;quot;&lt;/p&gt;

&lt;p&gt;Packets of information are sent from node to node through paths called &amp;quot;routes.&amp;quot;&lt;/p&gt;

&lt;p&gt;A &amp;quot;router&amp;quot; is a device that receives packets and sends them on to their destination. &lt;/p&gt;

&lt;h2 id=&quot;types-of-networks-(topology)&quot;&gt;Types of networks (topology)&lt;/h2&gt;

&lt;p&gt;Different networks have different physical or virtual arrangements of devices.&lt;label for=&#39;nettypes&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;nettypes&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;Examples of different netwotk topologies&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/9/97/NetworkTopologies.svg&quot; target=&quot;_blank&quot; &gt;&lt;img width=&quot;200px&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/NetworkTopologies.svg/200px-NetworkTopologies.svg.png&quot; alt=&quot;Types of networks&quot; /&gt;&lt;/a&gt; &lt;/span&gt; &lt;/p&gt;

&lt;p&gt;Most of the networks that we deal with on a given day are star networks. 
They might be connected to other star networks so that you will end up with a star of stars. 
In these networks each device connects to a node and then that node sends them elsewhere on the network. 
The node that is used to connect is usually either a router or switch of some kind. 
Connections occur through a single path. 
If a connection is lost, either through physical network failure or through software failure, it is not possible to re-establish the connection unless the route is restored. &lt;/p&gt;

&lt;p&gt;Most local area networks (LANs) operate in this way. &lt;/p&gt;

&lt;p&gt;Some networks allow any device to connect to any other device. 
These are called mesh networks. &lt;/p&gt;

&lt;p&gt;A mesh network is self-healing, which means that if a connection is dropped between any two given devices, the same connection can be re-established through a different route. 
These networks are not typically in use on LANs, but there is a very large one that we interact with on a near-continuous basis.&lt;/p&gt;

&lt;h1 id=&quot;inter-networks&quot;&gt;Inter-networks&lt;/h1&gt;

&lt;p&gt;Inter-networks have several layers. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Link-layer: communication between hosts on a single network&lt;/li&gt;
&lt;li&gt;Internet layer: communication between networks &lt;/li&gt;
&lt;li&gt;Transport layer: communication between hosts&lt;/li&gt;
&lt;li&gt;Application layer: communication between processes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The communication protocols that are used to govern how information is routed through these layers are called Transmission Control Protocol and Internet Protocol (TCP/IP).&lt;/p&gt;

&lt;p&gt;TCP/IP governs the way that all information is routed through networks. &lt;/p&gt;

&lt;p&gt;These protocols are how we derive addresses on networks. 
Different networks have different modes of addressing, but they use a similar structure. 
It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;192.168.1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each block of numbers in that string of numbers and dots is called a quad and can be used either to represent a device or a subnet. 
The first three quads might represent subnets of subnets and the last represents a subnet of addresses. &lt;/p&gt;

&lt;p&gt;Each number can range from 0-255, meaning that it can address a space with 256 individual devices or subnets in the network. 
The limit is due to the fact that each quad is actually a binary number which can address an 8-bit space. 
8-bit means that in each quad there are 8 individual binary bits or on/off pairs that can be flipped to record the number. 
This means that the address above actually reads like this in binary:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;11000000.10101000.00000001.00000001&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With this address structure, we can address 256&lt;sup&gt;4&lt;/sup&gt;, or 256*256*256*256 = 4,294,967,296, addresses.&lt;label for=&#39;256&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;256&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;Why 256 addresses?&lt;br/&gt;&lt;br/&gt;Wilson, Gray. “The Story of 256.” &lt;a href=&quot;http://256.com/&quot;&gt;http://256.com/&lt;/a&gt;. Last modified 2002. &lt;a href=&quot;http://256.com/256.html&quot;&gt;http://256.com/256.html&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Knowing the numbers in sequence allows for traffic to be routed from one subnet to another. 
The whole string of numebrs together is the address for an individual host/node on the network. &lt;/p&gt;

&lt;h2 id=&quot;names&quot;&gt;Names&lt;/h2&gt;

&lt;p&gt;So how is it that when we type &lt;code&gt;http://www.unc.edu&lt;/code&gt; into a browser navigation bar that we end up at UNC&amp;#39;s website? &lt;/p&gt;

&lt;p&gt;This is achieved through something called Dynamic Name Service (DNS).&lt;/p&gt;

&lt;p&gt;DNS maps domain or host names onto IP addresses, which allows us to use human-readable names for places on a network. 
We use this on the Internet so that we can type &lt;code&gt;unc.edu&lt;/code&gt; instead of having to remember that UNC&amp;#39;s webserver is located at &lt;code&gt;152.19.230.139&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;DNS is hierarchical and uses a mesh in order to maintain service globally. 
Most institutions run their own cacheing nameservers which allow faster LAN access to routing information for domain names. &lt;/p&gt;

&lt;p&gt;There are 13 &amp;quot;root name servers&amp;quot; globally that mirror each other.&lt;label for=&#39;dnsroots&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;dnsroots&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;List of DNS root servers&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Root_name_server#Root_server_addresses&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; &lt;/span&gt;
When you make a change to the DNS information related to a site or host, it propagates through this network of root servers. &lt;/p&gt;

&lt;p&gt;When we type &lt;code&gt;unc.edu&lt;/code&gt; into a browser or other network tool, a query is made against a DNS server somewhere and the DNS server then tells us where that domain is located physically (or in some cases virtually).
Then a request is made to the nearest routing host on our network which sends the request to the next and to the next until it hits its destination. 
When the request arrives at its intended target, that host responds by attempting to fulfill the request and route the information back to the origin of the request. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Et voila!&lt;/em&gt; It all happens in the blink of an eye.&lt;/p&gt;

&lt;p&gt;Next we will look at some methods for figuring out what is happening on a network during that blink. &lt;/p&gt;

&lt;h1 id=&quot;network-tools&quot;&gt;Network tools&lt;/h1&gt;

&lt;p&gt;Next week, we will explore networks a bit more and talk about some of the tools that we can and will use to better understand the networks around us. &lt;/p&gt;

&lt;p&gt;For the rest of the session today, we&amp;#39;ll be exploring more using git and GitHub. &lt;/p&gt;

&lt;h1 id=&quot;for-next-time&quot;&gt;For Next Time&lt;/h1&gt;

&lt;p&gt;Though we will go over this in class, I would like you to review the &amp;quot;Hello World&amp;quot; GitHub Guide on your own time.&lt;label for=&#39;hello&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;hello&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;“Hello World.” GitHub Guides. Last modified April 7, 2016. Accessed June 23, 2016. &lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot;&gt;https://guides.github.com/activities/hello-world/&lt;/a&gt;. &lt;/span&gt; &lt;/p&gt;

&lt;p&gt;We will use some of its principles in the Friday lab to get ourselves set up for the next assignment: building a web page from scratch (sort of).&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/23/networks/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/23/networks/</guid>
        
        <category>networking</category>
        
        <category>networks</category>
        
        <category>inter-networks</category>
        
        <category>GitHub</category>
        
        
        <category>Basics</category>
        
      </item>
    
      <item>
        <title>Version Control</title>
        <description>&lt;p&gt;Version control systems allow us to track and see the changes to a given document or set of files over time. 
This can be useful in situations where you wish to roll back changes or identify the point of origin for something problematic. &lt;/p&gt;

&lt;p&gt;It is also helpful when you are collaborating and want to be able to keep track of the work being done and changes being made by a group of people. &lt;/p&gt;

&lt;p&gt;Version control can exist in a standalone system or it can be networked and distributed. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h2 id=&quot;track-changes&quot;&gt;Track changes&lt;/h2&gt;

&lt;p&gt;One expression of version control that we are probably all familiar with is the &amp;quot;Track Changes&amp;quot; function in MSOffice. 
It works if one person is using it to track changes between writing session. 
It also might work if two people are exchanging a document and each making changes when they have the document in their possession. 
Each handoff operates like a physical handoff in this case. &lt;/p&gt;

&lt;p&gt;But when you try to track changes with two people and then merge those documents, things become tricky. 
Which changes take precedence? 
How do you merge them together when you have both rewritten the same sentence? &lt;/p&gt;

&lt;p&gt;The process of merging becomes very difficult, very quickly and since the design of that interface wants to hide what is going on underneath, you might miss something and end up with a document that you did not mean to leave or leave something out accidentally. &lt;/p&gt;

&lt;h2 id=&quot;software-source-code&quot;&gt;Software source code&lt;/h2&gt;

&lt;p&gt;In the software development world, there are a number of systems that allow development teams to make small, incremental changes to the source code for a piece of software without losing work, breaking each others code, or stepping on each others fingers. &lt;/p&gt;

&lt;p&gt;The basic idea is that when you wish to make changes to a set of source code files, you have to check them out. 
This is just like checking out a library book, except that there are an infinite number of copies available and you can write on the pages. 
The object that you check out is called a repository. 
When you check it out, you get the source code files themselves, but you also get a whole bunch of metadata about them. 
The metadata includes information about when and how changes and merges have been made to the files as well as any user-generated information. &lt;/p&gt;

&lt;p&gt;Once checked out, you can make changes to the source files and then compile or test to make sure that your changes work. 
Then, once tested, you check them back in. 
Sometimes, the check-in process is fully automated, meaning that no human has to look to make sure that your changes make sense. 
Other time, the check-in needs to be verified. 
There are compelling reasons to use either of these scenarios. &lt;/p&gt;

&lt;p&gt;In such systems, each commit, or incremental change, is registered with a unique identifier. 
This means that the change is tracked and cannot be confused with any other change at any other time. &lt;/p&gt;

&lt;p&gt;When multiple parties are working on the same code, merging can be confusing, unless the changes are properly tracked. 
Version control systems allow us to make sure that merges go as smoothly as possible. &lt;/p&gt;

&lt;h2 id=&quot;distributed-version-control&quot;&gt;Distributed version control&lt;/h2&gt;

&lt;p&gt;In a fully distributed version control system (DVCS), multiple copies of the same repository can exist on different systems with different operators and still be elegantly reconciled as the same object. 
This means that work can be conducted asynchronously and then merged together later. 
Then length of time and amount of work done on each copy will have an effect on how easy or difficult it will be to merge the source back together. 
It is likely that if a long time occurs between merges, there will be some issues that crop up, particularly if a lot of changes are made. &lt;/p&gt;

&lt;p&gt;It is a good idea to keep your repositories up-to-date. 
It also acts as an easy back up system, if you are storing the repository off-site somewhere. &lt;/p&gt;

&lt;h3 id=&quot;distributed-version-control-for-document-processing&quot;&gt;Distributed version control for document processing&lt;/h3&gt;

&lt;p&gt;Version control of this kind is not just for software development. 
It is possible to use it to manage your own workflow in creating and editing documents. 
It also works for managing different versions of datasets, from raw data to clean, ready-to-analyze data. &lt;/p&gt;

&lt;p&gt;In this course, we are going to use such a system to manage and back up our work.  &lt;/p&gt;

&lt;p&gt;You should have read through the following:&lt;/p&gt;

&lt;p&gt;Wynn, J. (2014, May 25). &lt;a href=&quot;http://wildlyinaccurate.com/a-hackers-guide-to-git/&quot;&gt;A Hacker&amp;#39;s Guide to Git&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We will disscuss the fundamental concepts about version control contained in that article. &lt;/p&gt;

&lt;p&gt;Then, for the rest of today&amp;#39;s class we are going to experiment with the version control systems that we will operate on and learn how to get our information into them and manage it once it is there.&lt;/p&gt;

&lt;h1 id=&quot;git&quot;&gt;git&lt;/h1&gt;

&lt;p&gt;We will use Git as our version control system in this class. 
Git has an interesting past and was developed out of necessity. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A Short History of Git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As with many great things in life, Git began with a bit of creative destruction and fiery controversy.&lt;/p&gt;

&lt;p&gt;The Linux kernel is an open source software project of fairly large scope. For most of the lifetime of the Linux kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files. In 2002, the Linux kernel project began using a proprietary DVCS called BitKeeper.&lt;/p&gt;

&lt;p&gt;In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool’s free-of-charge status was revoked. This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper. Some of the goals of the new system were as follows:&lt;/p&gt;

&lt;p&gt;Speed&lt;/p&gt;

&lt;p&gt;Simple design&lt;/p&gt;

&lt;p&gt;Strong support for non-linear development (thousands of parallel branches)&lt;/p&gt;

&lt;p&gt;Fully distributed&lt;/p&gt;

&lt;p&gt;Able to handle large projects like the Linux kernel efficiently (speed and data size)&lt;/p&gt;

&lt;p&gt;Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. It’s incredibly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development (&lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git&quot;&gt;Chacon &amp;amp; Straub, 2014&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the development of Git is tied to the development of the Linux kernel, but it doesn&amp;#39;t end there. 
It has come to be used in millions of projects and development workflows. 
Its versatility has also inspired people to develop new layers of interaction to work with it. 
We will discuss and explore one of those today and then use it for the rest of the semester. &lt;/p&gt;

&lt;p&gt;First, though, lets explore Git, starting with the elegantly designed &lt;a href=&quot;http://rogerdudler.github.io/git-guide/&quot;&gt;Git: The Simple Guide&lt;/a&gt; by Roger Dudler.&lt;/p&gt;

&lt;p&gt;A more advanced and quite elegant Git tutorial is available here: &lt;a href=&quot;https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config&quot;&gt;Git Tutorials and Training - Atlassian&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;github&quot;&gt;GitHub&lt;/h1&gt;

&lt;p&gt;GitHub is a platform that allows for users to keep copies of their open source, plaintext repositories online, in a single centralized location. 
It also adds a social interaction layer to the process of managing version-controlled source files. &lt;/p&gt;

&lt;p&gt;It is useful for (and used by) software development projects as well as other plaintext-based projects, such as collaborative authoring of books and articles. &lt;/p&gt;

&lt;p&gt;It is particularly good for keeping track of projects that involve both plaintext source code or markup and files related to work that will be published using that code. &lt;/p&gt;

&lt;p&gt;Today we are going to learn to set up a repository locally&lt;/p&gt;

&lt;p&gt;Tomorrow we will learn to push it to GitHub. 
We will also learn to set up a repository remotely on GitHub and then copy it locally. &lt;/p&gt;

&lt;p&gt;For this purpose, we will follow this guide, for the most part:  &lt;/p&gt;

&lt;p&gt;Orsini, L. (2013). &lt;a href=&quot;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&quot;&gt;GitHub For Beginners: Don&amp;#39;t Get Scared, Get Started&lt;/a&gt;. Retrieved from &lt;a href=&quot;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&quot;&gt;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has much the same information as some of the other articles and books referenced in our course site, but it strings the different parts together and makes for a useful review resource.&lt;/p&gt;

&lt;p&gt;Since we will have already created repos, we may want to have a look at this to see how we can get our repo into GitHub: &lt;a href=&quot;https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/&quot;&gt;https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/22/git/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/22/git/</guid>
        
        <category>version control</category>
        
        <category>git</category>
        
        <category>shell commands</category>
        
        
        <category>Basics</category>
        
      </item>
    
      <item>
        <title>Clients and Servers</title>
        <description>&lt;p&gt;Today we&amp;#39;ll talk about some of the basic ways that computers work and
interact with one another. We&amp;#39;ll also begin discussing the history of
computing in the context of operating systems, UNIX, and Linux.&lt;/p&gt;

&lt;p&gt;In class we will also start with some hands-on-keyboards practice with
moving around the shell and manipulating files. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h1 id=&quot;clients&quot;&gt;Clients&lt;/h1&gt;

&lt;p&gt;A &amp;quot;client&amp;quot; in the context of computing is any hardware or software that
is used to connect to a service being run on a server. &lt;span
class=&quot;marginnote&quot;&gt;The client-server
model&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Client_(computing)#/media/File:Client-server-model.svg&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Client-server-model.svg/200px-Client-server-model.svg.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Almost every device that you interact with now is a client. Each time
your phone reaches out to see if you have new messages, it is a client.
When you go to web browser to bring up Facebook, your computer is a
client. When you you talk to Siri or Alexa or Google Now or whatever
creepy robot voice you talk to, your are talking to a client which sends
your request out to a server for processing.&lt;/p&gt;

&lt;p&gt;Very little in the networked world operates locally, and that is as it
should be.&lt;/p&gt;

&lt;h1 id=&quot;servers&quot;&gt;Servers&lt;/h1&gt;

&lt;p&gt;A &amp;quot;server&amp;quot; is a piece of hardware or software that runs a service for
clients to connect to. &lt;span class=&quot;marginnote&quot;&gt;A typical server rack
in a datacenter&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_center&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f5/Rack001.jpg/360px-Rack001.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, certain types of servers are referred to as &amp;quot;daemons.&amp;quot; Don&amp;#39;t
worry, your computing infrastructure is not possessed.&lt;/p&gt;

&lt;p&gt;They are called this in reference to Maxwell&amp;#39;s demon, which is itself a
reference to the ancient Greek notion of a δαίμων (daimon). These were
spirits that operated the world around us, unseen and unseeable. Broadly
construed, they were the forces that made all of the otherwise
unexplained processes happen in the physical world. James Clerk Maxwell
adapted this notion to pose potential violations to the Second Law of
Thermodynamics. His demon acted precisely in the way that the Greek
daimon did, except naughty.&lt;/p&gt;

&lt;p&gt;All that aside, a daemon is a &amp;quot;background process.&amp;quot; Some piece of
software that runs on a computer in the background and waits for
something to happen. These processes listen, typically on a specific
port for an event to occur. When that event occurs, the daemon executes
some set of instructions.&lt;/p&gt;

&lt;p&gt;In a server, that event will be a request for something.&lt;/p&gt;

&lt;p&gt;In a web server, that event will be a request for a web page or some
other web content.&lt;/p&gt;

&lt;p&gt;On a web server, the daemon that serves the web pages listens on port
number 8000, unless otherwise specified.&lt;/p&gt;

&lt;p&gt;When it receives a request on port 8000, it dutifully gathers up all of
the requisite parts of the web page, interprets them, and then sends
them to your client (a.k.a., your browser) and then all of that
information gets prettified and placed on your screen so that it can go
into your eyeballs and then your brain.&lt;/p&gt;

&lt;h2 id=&quot;questions-to-keep-in-mind:-{#questions-to-keep-in-mind:}&quot;&gt;Questions to keep in mind: {#questions-to-keep-in-mind:}&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Why do we use this model?&lt;/li&gt;
&lt;li&gt; What are the advantages?&lt;/li&gt;
&lt;li&gt; Why not just run all this stuff on the devices in our
hands/pockets/backpacks?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this class, when we operate on a remote system, we will do so through
a few different protocols, which will be detailed shortly.&lt;/p&gt;

&lt;p&gt;Operating on a remote system directly--that is, manipulating files and
issuing instructions in a command shell--is preferable if you wish to
have a high level of control over what you are doing. It also keeps you
closer to &amp;quot;bare-metal&amp;quot; computing. In most cases, what we will be doing
is not, in fact, bare metal computing, but rather interacting with
systems that run on huge banks of servers, the resources of which have
been virtualized and distributed across many more systems than there
could possibly be if each were running on its own.&lt;/p&gt;

&lt;p&gt;This abstraction, however, does not take us too far from the experience
that we are aiming at. We will learn all the same techniques as if we
were running on systems directly.&lt;/p&gt;

&lt;h1 id=&quot;linux-and-unix&quot;&gt;Linux and UNIX&lt;/h1&gt;

&lt;p&gt;I will not go too deeply into the history of Linux and UNIX, except to
say a few things and explain why we are using these as our primary
platforms for operation.&lt;/p&gt;

&lt;p&gt;UNIX is a general purpose, multitasking, multi-user operating system
designed in the 1970s at Bell Labs. &lt;span class=&quot;marginnote&quot;&gt;UNIX
history&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/7/77/Unix_history-simple.svg&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Unix_history-simple.svg/200px-Unix_history-simple.svg.png&quot; alt=&quot;UNIX
History&quot;&gt;&lt;/a&gt;
&lt;/span&gt; The name &amp;quot;UNIX&amp;quot; now refers to a whole family of operating
systems.&lt;/p&gt;

&lt;p&gt;UNIX serves as the precursor to a complete, independent clone thereof
called &amp;quot;Linux.&amp;quot; Linux was developed initially in 1991 by a student at
Helsinki University named Linux Torvalds, who still develops the
operating system kernel today. The project was inspired by the lack of a
functioning kernel for the GNU UNIX-like system designed by Richard
Stallman. Torvalds says that if the GNU kernel had worked, he would
likely have never written Linux.&lt;/p&gt;

&lt;p&gt;When you use Linux today you are actually using GNU and Linux together.
Linux provides the operating system kernel and GNU provides the system
software layer that runs over it and allows you to interact with it.
There are myriad different versions of GNU/Linux floating around out
there. All are Free and Open Source Software, which means that you can
download the source code, compile it yourself, and run it on any system
you like. Below is a family tree of all existing GNU/Linux
distributions. Have a look to see if you can find Ubuntu, the system
that we are most likely using on our CodeAnywhere Dev Boxes. &lt;span
class=&quot;marginnote&quot;&gt;A timeline of Linux distributions&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Linux_Distribution_Timeline.svg/200px-Linux_Distribution_Timeline.svg.png&quot; alt=&quot;GNU/Linux Family
Tree&quot;&gt;&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Operating systems are complex, as is their history, and I am afraid that
I cannot do justice to it here. This history (and a general history of
personal computing) is best told in a long essay by science-fiction
author, Neal Stephenson:&lt;/p&gt;

&lt;p&gt;Stephenson, N. (1999). &lt;a href=&quot;http://www.cryptonomicon.com/beginning.html&quot;&gt;In the beginning was the command
line&lt;/a&gt;. Retrieved from
&lt;a href=&quot;http://www.cryptonomicon.com/beginning.html&quot;&gt;http://www.cryptonomicon.com/beginning.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read that piece at some point, if you have a chance. It&amp;#39;s fascinating,
exceedingly well-written, and a reasonably easy read.&lt;/p&gt;

&lt;h2 id=&quot;who-cares?-{#who-cares?}&quot;&gt;Who cares? {#who-cares?}&lt;/h2&gt;

&lt;p&gt;Right, so why is this important?&lt;/p&gt;

&lt;p&gt;Well for starters, some version of UNIX or Linux runs on the backend of
nearly 70% of all public-facing web servers. In addition to that, Linux
runs on 97% of supercomputers and computer clusters.&lt;/p&gt;

&lt;p&gt;Also, Mac OS X is UNIX-based. Android is just a weird, simplified
version of Linux. Chrome OS, underneath the browser layer is Linux.
Myriad little embedded devices like e-readers, tiny automation devices,
media devices (DVRs, Amazon Fire, Roku, etc.) have some Linux-y thing
running underneath.&lt;/p&gt;

&lt;p&gt;UNIX and Linux surround you, physically and otherwise.&lt;/p&gt;

&lt;p&gt;It is important to know something about the things around you.
Otherwise, they might as well be operating as if by magic.&lt;/p&gt;

&lt;h2 id=&quot;so...&quot;&gt;So...&lt;/h2&gt;

&lt;p&gt;So, if you ever have occasion to operate on a remote system, it is
terribly likely that you are going to be logging into a Linux box
somewhere, and failing that, a UNIX box. From now on, you&amp;#39;ll never be
able to say that you don&amp;#39;t know how to do that.&lt;/p&gt;

&lt;h1 id=&quot;for-the-next-session:-{#for-the-next-session:}&quot;&gt;For the next session: {#for-the-next-session:}&lt;/h1&gt;

&lt;p&gt;Look at Joseph Wynn&amp;#39;s &amp;quot;Hacker&amp;#39;s Guide&amp;quot;. &lt;span class=&quot;marginnote&quot;&gt;Wynn,
Joseph. “A Hacker’s Guide to Git.” Wildly Innacurate. Last modified May
25, 2014. &lt;a href=&quot;http://wildlyinaccurate.com/a-hackers-guide-to-git/&quot;&gt;http://wildlyinaccurate.com/a-hackers-guide-to-git/&lt;/a&gt;. &lt;/span&gt;
It is a really useful tutorial for new users of git who want to know
ways to get things done with it.&lt;/p&gt;

&lt;p&gt;I would also like you to look at Roger Dudler&amp;#39;s simple git tutorial.
&lt;span class=&quot;marginnote&quot;&gt;Dudler, Roger. “Git: The Simple Guide.” Git:
The Simple Guide. Last modified 2015.
&lt;a href=&quot;http://rogerdudler.github.io/git-guide/&quot;&gt;http://rogerdudler.github.io/git-guide/&lt;/a&gt;. &lt;/span&gt; It is the best and
fastest way to get you up to speed using git.&lt;/p&gt;

&lt;p&gt;We will also return to &amp;quot;Learning the Shell&amp;quot; &lt;span
class=&quot;marginnote&quot;&gt;Shotts, William, Jr. “Learning the Shell.”
LinuxCommand.org. &lt;a href=&quot;http://linuxcommand.org/lc3_learning_the_shell.php&quot;&gt;http://linuxcommand.org/lc3_learning_the_shell.php&lt;/a&gt;.
&lt;/span&gt; for more command line fun. We&amp;#39;ll do some more exploring once we
are up to speed with git as well.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/21/clients-servers/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/21/clients-servers/</guid>
        
        <category>clients</category>
        
        <category>servers</category>
        
        <category>Linux</category>
        
        <category>shell commands</category>
        
        
        <category>Basics</category>
        
      </item>
    
      <item>
        <title>Welcome to INLS161!</title>
        <description>&lt;p&gt;This is a course about pushing our boundaries and learning new things. 
It is also about learning new ways of doing things that we might already know how to do. 
Some of the topics and skills covered by the course might be old hat for some of you. 
Others may not have ever heard of some of these things. 
&lt;excerpt/&gt;&lt;/p&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;

&lt;p&gt;We&amp;#39;ll be using an learning a number of different tools in this class. &lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;GitHub&lt;/h2&gt;

&lt;p&gt;&lt;label for=&#39;github&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;github&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot;&gt;&lt;img width=&quot;200px&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/GitHub_logo_2013.svg/200px-GitHub_logo_2013.svg.png&quot; alt=&quot;GitHub&quot; /&gt;&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;To get us started, we will be using GitHub as a repository for our output. &lt;/p&gt;

&lt;p&gt;GitHub will also help us learn about version control and the importance of keeping your versions in order. &lt;/p&gt;

&lt;h2 id=&quot;codeanywhere&quot;&gt;CodeAnywhere&lt;/h2&gt;

&lt;p&gt;&lt;label for=&#39;codeanywhere&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;codeanywhere&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;&lt;a href=&quot;https://codeanywhere.com/&quot; target=&quot;_blank&quot;&gt;&lt;img width=&quot;200px&quot; src=&quot;https://s3.amazonaws.com/image.infoarmy/1388835079827.png&quot; alt=&quot;CodeAnywhere&quot; /&gt;&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Following that, we will use CodeAnywhere to learn about remote operations and to do our web development tasks.&lt;/p&gt;

&lt;p&gt;CodeAnywhere is a web-based integrated development environment (IDE). It highlights syntax for a number of different languages and makes it easy to get to your code wherever you are. &lt;/p&gt;

&lt;p&gt;In today&amp;#39;s session, we are going to make sure that everyone is set up on GitHub and add everyone to an GitHub organization for this class. 
We will also set up CodeAnywhere and make sure that everyone can log in and set up a Dev Box where you will be able to do some of your work. &lt;/p&gt;

&lt;h2 id=&quot;plaintext&quot;&gt;Plaintext&lt;/h2&gt;

&lt;p&gt;We will approach all of the tasks for this class starting with plaintext. 
This means no GUIs to get in the way of our content or design. &lt;/p&gt;

&lt;p&gt;We will learn how to run on a command line interface (CLI) and how to do some basic scripting to automate our work. &lt;/p&gt;

&lt;h1 id=&quot;try-new-things&quot;&gt;Try new things&lt;/h1&gt;

&lt;p&gt;This is a course about trying new things and learning in non-linear ways. 
If you are used to doing something one way, then branch out and do it in another way.
This might seem difficult at first, but it will only benefit you in the long run.
By increasing your flexibility and allowing you to swap different tools in and out of your toolchain as needed, you will develop a very marketable technical skillset. &lt;/p&gt;

&lt;p&gt;Next we&amp;#39;ll take a look at some different ways of doing things and what that means for us.&lt;/p&gt;

&lt;p&gt;This is the meat of today&amp;#39;s lecture. &lt;/p&gt;

&lt;h2 id=&quot;flexibility-==-technological-skill&quot;&gt;Flexibility == technological skill&lt;/h2&gt;

&lt;p&gt;As previous mentioned in the notes, this class is about challenging your boundaries with basic technological tools. 
This will mean sometimes learning what seems to be a really complicated way of doing something that seems like it should be simple. &lt;/p&gt;

&lt;p&gt;But things are not always as they appear. &lt;/p&gt;

&lt;p&gt;You may think that it is simpler to create a webpage using some specially-designed interface for web design or, worse, creating a document in MSWord and then either copying and pasting that your work into a what-you-see-is-what-you-get (WYSIWYG) editor or exporting to HTML. 
You can do this, but if you want to use your markup later on or understand what is happening (as we do in this class), it is not a good option. &lt;/p&gt;

&lt;p&gt;For example, if you want to make a PDF that is well-formatted, you have a few options as well. &lt;/p&gt;

&lt;p&gt;One toolchain looks like this: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;LibreOffice Writer (software) &amp;gt; ODT (file format) &amp;gt; Export as PDF (file format)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another looks like tihs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Markdown (plaintext markup) &amp;gt; Pandoc (software) &amp;gt; LaTeX (software) &amp;gt; PDF (file format)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The difference here is the way that the SOURCE of the files are conceived. 
The source for the first option is wrapped up in the interface somewhere. 
We can&amp;#39;t see it. 
The source for the second option is the original plaintext file using markup to tell the interpreter what to do with it. &lt;/p&gt;

&lt;h3 id=&quot;why-is-this-second-approach-advantageous?&quot;&gt;Why is this second approach advantageous?&lt;/h3&gt;&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s look at a second usage scenario. 
Let&amp;#39;s say that I want to have the same document that I put into PDF, but as a web page also.&lt;/p&gt;

&lt;p&gt;From LibreOffice, I have to export HTML and then upload it to a web server. 
Fine. &lt;/p&gt;

&lt;p&gt;If I start with Markdown, however, my toolchain looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Markdown &amp;gt; Pandoc &amp;gt; HTML&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;What is better yet is that since the tools in this scenario rely on marked-up plaintext and commands that can be executed without a graphical user interface (GUI), I can probably create the documents server-side rather than having to upload them after working on them locally. &lt;/p&gt;

&lt;p&gt;This approach helps with automation and also with having multiple desired output formats that can come from a single source. &lt;/p&gt;

&lt;p&gt;There are easy ways to do everything, and there are hard ways to do everything. 
Neither are ever going to be the right way all the time. 
The method that you use to complete a task has to depend on the context of the task. 
The right way will fall somewhere in the middle or be an amalgam of both. &lt;/p&gt;

&lt;p&gt;We&amp;#39;ll talk more in the next few sessions about operating on a system using the command line for giving instructions and running programs. &lt;/p&gt;

&lt;h1 id=&quot;for-the-next-session:&quot;&gt;For the next session:&lt;/h1&gt;

&lt;p&gt;I would like you to have a look at the Bill Shotts&amp;#39; &amp;quot;Learning the Shell.&amp;quot;&lt;label for=&#39;shell&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;shell&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;Shotts, William, Jr. “Learning the Shell.” LinuxCommand.org. &lt;a href=&quot;http://linuxcommand.org/lc3_learning_the_shell.php&quot;&gt;http://linuxcommand.org/lc3_learning_the_shell.php&lt;/a&gt;. &lt;/span&gt; 
Go through each of the steps in the contents listed on that page and try out the commands in your CodeAnywhere DevBox interface that we set up. This is where we will start tomorrow.&lt;/p&gt;

&lt;p&gt;I would also like you to read Tristan Harris&amp;#39; blog post&lt;label for=&#39;hijack&#39; class=&#39;margin-toggle&#39;&gt; &amp;#8853;&lt;/label&gt;&lt;input type=&#39;checkbox&#39; id=&#39;hijack&#39; class=&#39;margin-toggle&#39;/&gt;&lt;span class=&#39;marginnote&#39;&gt;Harris, Tristan. “How Technology Hijacks People’s Minds — from a Magician and Google’s Design Ethicist.” Medium. Last modified May 18, 2016. &lt;a href=&quot;https://medium.com/swlh/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3&quot;&gt;https://medium.com/swlh/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3&lt;/a&gt;. &lt;/span&gt; about how design choices in interfaces affect how we think and interact. &lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://inls161.johndmart.in/basics/2016/06/20/intro/</link>
        <guid isPermaLink="true">http://inls161.johndmart.in/basics/2016/06/20/intro/</guid>
        
        <category>intro</category>
        
        <category>tools</category>
        
        <category>GitHub</category>
        
        <category>CodeAnywhere</category>
        
        
        <category>Basics</category>
        
      </item>
    
  </channel>
</rss>
